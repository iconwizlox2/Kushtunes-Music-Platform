generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication (NextAuth compatible)
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String?  @unique
  password        String?
  firstName       String?
  lastName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  isEmailVerified Boolean  @default(false)
  isActive        Boolean  @default(true)
  role            UserRole @default(ARTIST)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]
  accounts        Account[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// MVP Artist Portal Models
model Artist {
  id            String      @id @default(cuid())
  name          String
  legalName      String
  country        String
  email          String      @unique
  payoutMethod   String?     // Stripe Connect ID or PayPal email
  kycStatus      KycStatus   @default(PENDING)
  kycDocuments   Json?       // Store KYC document URLs
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  releases       Release[]
  splits         Split[]
  payouts        Payout[]
  
  @@map("artists")
}

model Release {
  id              String      @id @default(cuid())
  upc             String?     @unique // Auto-generated if blank
  title           String
  version         String?     // e.g., "Radio Edit", "Extended Mix"
  label           String?
  primaryArtistId String
  releaseDate     DateTime
  territories     String[]    // Array of country codes
  status          ReleaseStatus @default(DRAFT)
  genre           String?
  subgenre        String?
  copyrightYear   Int?
  pLine           String?     // P-line copyright
  cLine           String?     // C-line copyright
  coverUrl        String?     // 3000x3000 cover art
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  primaryArtist   Artist      @relation(fields: [primaryArtistId], references: [id], onDelete: Cascade)
  tracks          Track[]
  deliveries      Delivery[]
  
  @@map("releases")
}

model Track {
  id          String      @id @default(cuid())
  releaseId   String
  isrc        String?     @unique // Auto-generated if blank
  title       String
  version     String?     // Track version
  trackNumber Int
  explicit    Boolean     @default(false)
  language    String      @default("en")
  duration    Int         // Duration in seconds
  audioUrl    String      // WAV/FLAC file URL
  lyrics      String?     // Optional lyrics
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  release     Release     @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  contributors Contributor[]
  splits      Split[]
  
  @@map("tracks")
}

model Contributor {
  id        String   @id @default(cuid())
  trackId   String
  name      String
  role      String   // e.g., "Producer", "Songwriter", "Performer"
  ipi       String?  // International Performer Identification
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("contributors")
}

model Split {
  id              String   @id @default(cuid())
  trackId         String
  artistId        String
  percent         Float    // Percentage (0-100)
  recoupmentFlag  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  track           Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist          Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("splits")
}

model Delivery {
  id          String          @id @default(cuid())
  releaseId   String
  store       String          // Store name (Spotify, Apple Music, etc.)
  status      DeliveryStatus  @default(PENDING)
  submittedAt DateTime?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  release     Release         @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  
  @@map("deliveries")
}

// Backoffice Admin Models
model Report {
  id           String      @id @default(cuid())
  period       String      // YYYY-MM format
  source       String      // Distributor name
  fileUrl      String      // URL to uploaded CSV/XLSX
  importedFlag Boolean     @default(false)
  importedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  earnings     Earning[]
  
  @@map("reports")
}

model Earning {
  id        String   @id @default(cuid())
  trackId   String
  store     String
  country   String
  units     Int      @default(0) // Streams, downloads, etc.
  revenue   Float    @default(0)
  period    String   // YYYY-MM format
  reportId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: SetNull)
  
  @@map("earnings")
}

model Payout {
  id        String        @id @default(cuid())
  artistId  String
  amount    Float
  method    String        // Stripe Connect, PayPal, etc.
  status    PayoutStatus  @default(PENDING)
  reference String?       // External reference ID
  processedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  artist    Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("payouts")
}

// Enums
enum UserRole {
  ARTIST
  LABEL
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum ReleaseStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  LIVE
}

enum DeliveryStatus {
  PENDING
  SUBMITTED
  PROCESSING
  LIVE
  REJECTED
  FAILED
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSED
  FAILED
}