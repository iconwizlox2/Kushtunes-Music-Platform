generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth.js Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?   // null if using OAuth/magic links later
  image         String?
  emailVerified DateTime? // null if not verified
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 1:1 link to Artist profile (business entity)
  artist        Artist?

  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  emailVerificationTokens EmailVerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

// MVP Artist Portal Models
model Artist {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id])
  name          String
  legalName      String
  country        String
  email          String      @unique
  payoutMethod   String?     // Stripe Connect ID or PayPal email
  taxStatus      TaxStatus   @default(INDIVIDUAL) // Individual, Business, Tax Exempt
  taxId          String?     // Tax ID number
  kycStatus      KycStatus   @default(PENDING)
  kycDocuments   Json?       // Store KYC document URLs
  role           String      @default("user") // "admin" | "user"
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  releases       Release[]
  splits         Split[]
  payouts        Payout[]
  auditLogs      AuditLog[]
  advances       Advance[]
  costs          Cost[]
  ownedLabels    Label[]
  labelMemberships LabelMember[]
  
  @@map("artists")
}

model Release {
  id              String      @id @default(cuid())
  upc             String?     @unique // Auto-generated if blank
  title           String
  version         String?     // e.g., "Radio Edit", "Extended Mix"
  label           String?
  primaryArtistId String
  releaseDate     DateTime
  territories     Json        // JSON array of country codes ["US", "CA", "GB"]
  excludedTerritories Json?   // JSON array of excluded countries
  status          ReleaseStatus @default(DRAFT)
  genre           String?
  subgenre        String?
  copyrightYear   Int?
  pLine           String?     // P-line copyright
  cLine           String?     // C-line copyright
  coverUrl        String?     // 3000x3000 cover art
  galleryUrls     Json?       // Optional gallery images for stores
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  primaryArtist   Artist      @relation(fields: [primaryArtistId], references: [id], onDelete: Cascade)
  tracks          Track[]
  deliveries      Delivery[]
  rights          Rights[]
  
  @@map("releases")
}

model Track {
  id          String      @id @default(cuid())
  releaseId   String
  isrc        String?     @unique // Auto-generated if blank
  title       String
  version     String?     // Track version
  trackNumber Int
  explicit    Boolean     @default(false)
  language    String      @default("en")
  duration    Int         // Duration in seconds
  audioUrl    String      // WAV/FLAC file URL
  previewStart Int?       // Preview start time in seconds (optional)
  lyrics      String?     // Optional lyrics
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  release     Release     @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  contributors Contributor[]
  splits      Split[]
  earnings    Earning[]
  
  @@map("tracks")
}

model Contributor {
  id        String   @id @default(cuid())
  trackId   String
  name      String
  role      ContributorRole // Main Artist, Featured Artist, Producer, Songwriter, etc.
  ipi       String?  // International Performer Identification
  cae       String?  // Composer/Author/Editor code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("contributors")
}

model Split {
  id              String   @id @default(cuid())
  trackId         String
  artistId        String
  percent         Float    // Percentage (0-100)
  recoupmentFlag  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  track           Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  artist          Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("splits")
}

model Delivery {
  id          String          @id @default(cuid())
  releaseId   String
  store       String          // Store name (Spotify, Apple Music, etc.)
  status      DeliveryStatus  @default(PENDING)
  submittedAt DateTime?
  message     String?         // Store response message
  notes       String?         // Internal notes
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  release     Release         @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  
  @@map("deliveries")
}

// Backoffice Admin Models
model Report {
  id           String      @id @default(cuid())
  period       String      // YYYY-MM format
  source       String      // Distributor name
  fileUrl      String      // URL to uploaded CSV/XLSX
  importedFlag Boolean     @default(false)
  importedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  earnings     Earning[]
  
  @@map("reports")
}

model Earning {
  id        String   @id @default(cuid())
  trackId   String
  store     String
  country   String
  units     Int      @default(0) // Streams, downloads, etc.
  revenue   Float    @default(0)
  period    String   // YYYY-MM format
  reportId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: SetNull)
  
  @@map("earnings")
}

model Payout {
  id        String        @id @default(cuid())
  artistId  String
  amount    Float
  method    PayoutMethod  // Stripe Connect, PayPal, Revolut, USDT
  status    PayoutStatus  @default(PENDING)
  reference String?       // External reference ID
  invoiceUrl String?      // Generated invoice/receipt URL
  processedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  artist    Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  @@map("payouts")
}

// Rights and Compliance Models
model Rights {
  id              String      @id @default(cuid())
  releaseId       String
  type            RightsType  // Original, Cover, Public Domain
  mechanicalLicense String?   // Mechanical license info if cover
  publicDomainFlag Boolean    @default(false)
  copyrightOwner  String?     // Copyright owner name
  copyrightYear   Int?        // Copyright year
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  release         Release     @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  
  @@map("rights")
}

model Compliance {
  id              String      @id @default(cuid())
  releaseId       String?
  trackId         String?
  type            ComplianceType // DMCA, Content Policy, KYC, etc.
  status          ComplianceStatus @default(PENDING)
  reason          String?     // Reason for compliance check
  action          String?     // Action taken
  reviewedBy      String?     // Admin who reviewed
  reviewedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("compliance")
}

model AuditLog {
  id        String   @id @default(cuid())
  artistId  String?
  userId    String?  // User who performed action
  action    String   // Action performed
  entity    String   // Entity affected (release, track, etc.)
  entityId  String   // ID of affected entity
  oldValues Json?    // Previous values
  newValues Json?    // New values
  ipAddress String?  // IP address
  userAgent String?  // User agent
  createdAt DateTime @default(now())
  artist    Artist?  @relation(fields: [artistId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

// Enums
enum UserRole {
  ARTIST
  LABEL
  ADMIN
}

enum TaxStatus {
  INDIVIDUAL
  BUSINESS
  TAX_EXEMPT
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum ReleaseStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  LIVE
}

enum ContributorRole {
  MAIN_ARTIST
  FEATURED_ARTIST
  PRODUCER
  SONGWRITER
  PERFORMER
  MIXER
  MASTERING_ENGINEER
  OTHER
}

enum DeliveryStatus {
  PENDING
  SUBMITTED
  PROCESSING
  LIVE
  REJECTED
  FAILED
}

enum PayoutMethod {
  STRIPE_CONNECT
  PAYPAL
  REVOLUT
  USDT
  BANK_TRANSFER
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSED
  FAILED
}

enum RightsType {
  ORIGINAL
  COVER
  PUBLIC_DOMAIN
  SAMPLED
}

enum ComplianceType {
  DMCA
  CONTENT_POLICY
  KYC_VERIFICATION
  COPYRIGHT_INFRINGEMENT
  AI_VOICE_CLONE
  OTHER
}

enum ComplianceStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  RESOLVED
}

// Recoup models for advance and cost tracking
model Advance {
  id           String   @id @default(cuid())
  artistId     String
  artist       Artist   @relation(fields: [artistId], references: [id])
  amountUSD    Float
  remainingUSD Float
  status       String   // "open" | "closed"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("advances")
}

model Cost {
  id           String   @id @default(cuid())
  artistId     String
  artist       Artist   @relation(fields: [artistId], references: [id])
  description  String
  recoupable   Boolean  @default(true)
  amountUSD    Float
  remainingUSD Float
  status       String   // "open" | "closed"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("costs")
}

model Label {
  id        String        @id @default(cuid())
  name      String
  owner     Artist        @relation(fields: [ownerId], references: [id])
  ownerId   String
  members   LabelMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@map("labels")
}

model LabelMember {
  id        String   @id @default(cuid())
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   String
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  role      String   @default("artist") // "artist" | "manager"
  createdAt DateTime @default(now())

  @@unique([labelId, artistId])
  @@map("label_members")
}