generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String?  @unique
  password        String?
  firstName       String?
  lastName        String?
  avatar          String?
  bio             String?
  website         String?
  location        String?
  isEmailVerified Boolean  @default(false)
  isActive        Boolean  @default(true)
  role            UserRole @default(ARTIST)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  releases        Release[]
  sessions        Session[]
  accounts        Account[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Release {
  id            String      @id @default(cuid())
  userId        String
  title         String
  artist        String
  type          ReleaseType @default(SINGLE)
  status        Status      @default(DRAFT)
  plannedAt     DateTime
  coverUrl      String?
  audioUrl      String?
  genre         String?
  language      String?
  releaseDate   DateTime?
  isrc          String?
  upc           String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks        Track[]
  distributions DSPDistribution[]
}

model Track {
  id        String   @id @default(cuid())
  releaseId String
  title     String
  isrc      String?
  audioUrl  String
  duration  Int?     // seconds
  createdAt DateTime @default(now())
  release   Release  @relation(fields: [releaseId], references: [id], onDelete: Cascade)
}

model DSPDistribution {
  id              String   @id @default(cuid())
  releaseId       String
  dsp             String
  dspName         String
  status          DistributionStatus @default(PENDING)
  submittedAt     DateTime @default(now())
  liveAt          DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  submissionId    String?  // External DSP submission ID
  platformUrls    Json?    // Store platform-specific URLs
  revenue         Float?   @default(0)
  streams         Int?     @default(0)
  downloads       Int?     @default(0)
  lastSyncAt      DateTime?
  metadata        Json?    // Store DSP-specific metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  release         Release  @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  analytics       DistributionAnalytics[]
  
  @@map("dsp_distributions")
}

model DistributionAnalytics {
  id              String   @id @default(cuid())
  distributionId  String
  date            DateTime
  streams         Int      @default(0)
  downloads       Int      @default(0)
  revenue         Float    @default(0)
  listeners       Int      @default(0)
  countries       Json?    // Country-wise data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  distribution    DSPDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  
  @@map("distribution_analytics")
}

enum ReleaseType {
  SINGLE
  EP
  ALBUM
}

enum Status {
  DRAFT
  READY
  PROCESSING
  LIVE
}

enum DistributionStatus {
  PENDING
  SUBMITTED
  PROCESSING
  LIVE
  REJECTED
  FAILED
}

enum UserRole {
  ARTIST
  LABEL
  ADMIN
}